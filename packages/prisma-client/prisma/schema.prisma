generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url = "postgresql://postgres:postgres@127.0.0.1:5432/db"// env("DATABASE_URL")
}

model Forgot {
  id String @id @default(uuid())
  token String @unique
  dashboardUser DashboardUser @relation(fields: [dashboardUserId], references: [id])
  dashboardUserId Int
  createdAt DateTime @default(now())
  deletedAt DateTime?
}

enum FeatureTypeEnum {
  Release
  GradualRollout
  Permission
  Experimental
  Operational
}

model FeatureType {
  name FeatureTypeEnum @id
  description String?
  features Feature[]
  createdAt DateTime @default(now())
  deletedAt DateTime?
}

enum RoleEnum {
  Admin
  User
}

enum StatusEnum {
  Active
  Inactive
}

model Application {
  id String @id
  name String
  createdAt DateTime @default(now())
  deletedAt DateTime?
}

model DashboardUser {
  id Int @id @default(autoincrement())
  role RoleEnum
  status StatusEnum
  registrationToken String? @unique
  password String
  previousPassword String?
  name String?
  email String @unique
  projects Project[]
  forgots Forgot[]
  updatedAt DateTime @updatedAt @default(now())
  createdAt DateTime @default(now())
  deletedAt DateTime?
}

model User {
  id String @id
  name String
  updatedAt DateTime @updatedAt @default(now())
  createdAt DateTime @default(now())
  deletedAt DateTime?
}

model Environment {
  id String @id
  name String
  updatedAt DateTime @updatedAt @default(now())
  createdAt DateTime @default(now())
  deletedAt DateTime?
  projects Project[]
  envFeatureToggles EnvFeature[]
}

model Project {
  id String @id
  name String
  description String
  updatedAt DateTime @updatedAt @default(now())
  createdAt DateTime @default(now())
  deletedAt DateTime?
  dashboardUsers DashboardUser[]
  environments Environment[]
  features Feature[]
  envFeatures EnvFeature[]
  states State[]
  featuresOnStates FeaturesOnStates[]
}

model EnvFeature {
  state Boolean
  updatingUser String
  queriedAt DateTime?
  updatedAt DateTime @updatedAt @default(now())
  deletedAt DateTime?
  createdAt DateTime @default(now())
  environment Environment @relation(fields: [environmentId], references: [id])
  environmentId String
  project Project @relation(fields: [projectId], references: [id])
  projectId String
  feature Feature @relation(fields: [featureName, projectId], references: [name, projectId])
  featureName String
  version Int @default(0)

  @@id([featureName, environmentId])
}

model Feature {
  name String
  type FeatureType @relation(fields: [typeName], references: [name])
  typeName FeatureTypeEnum
  createdBy String
  updatedAt DateTime @updatedAt @default(now())
  createdAt DateTime @default(now())
  deletedAt DateTime?
  project Project @relation(fields: [projectId], references: [id])
  projectId String
  states FeaturesOnStates[]
  envFeatureToggles EnvFeature[]

  @@id([projectId, name])
}

model State {
  id String
  name String
  updatedAt DateTime @updatedAt @default(now())
  createdAt DateTime @default(now())
  deletedAt DateTime?
  project Project @relation(fields: [projectId], references: [id])
  projectId String
  features FeaturesOnStates[]

  @@id([id, projectId])
}

model FeaturesOnStates {
  feature    Feature     @relation(fields: [featureName, projectId], references: [name, projectId])
  featureName  String 
  state   State @relation(fields: [stateId, projectId], references: [id, projectId])
  stateId String 
  project Project @relation(fields: [projectId], references: [id])
  projectId String

  @@id([stateId, projectId, featureName])
}